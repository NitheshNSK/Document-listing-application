Document Listing API

This is a RESTful API that allows you to manage documents. You can create, list, search, delete, and view documents using various endpoints. The API supports basic CRUD operations for documents and includes pagination, search functionality, and error handling.

Base URL

The base URL for all endpoints is:
http://127.0.0.1:8000

Authentication

This API does not require authentication.

API Endpoints

1. GET /api/documents

Fetches a list of all documents.

Query Parameters:

	•	search (optional): A search term to filter documents by name.

Example Request:

GET /api/documents?search=report

Example Response:
{
   [
    {
      "id": 1,
      "name": "report1.txt",
      "created_at": "2024-11-26T10:00:00Z",
      "size": 1024,
      "content": "Sample content for report 1"
    },
    {
      "id": 2,
      "name": "report2.txt",
      "created_at": "2024-11-25T10:00:00Z",
      "size": 2048,
      "content": "Sample content for report 2"
    }
  ],
  "total": 2
}


2. GET /api/documents/{id}

Fetch a single document by its ID.

Path Parameters:

	•	id: The ID of the document.

Example Request:

GET /api/documents/1

Example Response:
{
  "id": 1,
  "name": "report1.txt",
  "created_at": "2024-11-26T10:00:00Z",
  "size": 1024,
  "content": "Sample content for report 1"
}

3. POST /api/documents

Create a new document.

Request Body:
{
  "name": "new_document.txt",
  "content": "This is the content of the new document"
}
Example Request:

POST /api/documents

Example Response:

{
  "id": 3,
  "name": "new_document.txt",
  "created_at": "2024-11-26T15:00:00Z",
  "size": 512,
  "content": "This is the content of the new document"
}

4. DELETE /api/documents/{id}

Delete a document by its ID.
Path Parameters:

•	id: The ID of the document to be deleted.

Example Request:

DELETE /api/documents/3

Example Response:
{
  "message": "Document deleted"
}

API Documentation Details

	•	Search: You can search for documents by name using the search query parameter on the GET /api/documents endpoint.
	•	Sorting: Documents are returned in the order they were created (most recent first). You can implement sorting by name or date at the frontend.
	•	Content: Each document has a content field that contains the text content of the document.